name: Check Nightly Build Status
on:
  workflow_dispatch:
  schedule:
    - cron:  '0 8 * * 1-5' # runs at 9am CET (summer) on working days

permissions:
  contents: write
  issues: write

env:
  GH_TOKEN: ${{ github.token }}
  GH_REPO: duckdb/duckdb
  GH_ISSUE_REPO: ${{ github.repository }}

jobs:
  # check-wget:
  #   name: Check in advance
  #   runs-on: macos-13
  #   steps:
  #     - name: Checkout repo with the scripts
  #       uses: actions/checkout@v4
  #     - shell: bash
  #       run: chmod +x scripts/check_ext.sh && ./scripts/check_ext.sh
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         path: log.csv
  get-run-info:
    name: Generate nightly build artifact json file
    runs-on: ubuntu-latest
    outputs:
      CURR_DATE: ${{ steps.curr-date.outputs.CURR_DATE }}
    strategy:
      matrix:
        config: [{ "branch": "main", "event": "repository_dispatch"}, {"branch": "v1.2-histrionicus", "event": "workflow_dispatch"}]
    steps:
      - id: curr-date
        run: echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Checkout repo with the script
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.11'

      - name: Install DuckDB for Python
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install duckdb
      
      - name: Create Tables and Generate inputs.json
        shell: bash
        env:
          CURR_DATE: ${{ steps.curr-date.outputs.CURR_DATE }}
        run: |
          python scripts/create_tables_and_inputs.py --branch "${{ matrix.config.branch }}" --event "${{ matrix.config.event }}"

      - name: Upload DuckDB file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.branch }}_run_info_tables.duckdb
          path: ${{ matrix.config.branch }}_run_info_tables.duckdb
      
      - name: Upload inputs_${{ matrix.config.branch }}.json
        uses: actions/upload-artifact@v4
        with:
          name: inputs_${{ matrix.config.branch }}.json
          path: inputs_${{ matrix.config.branch }}.json
          if-no-files-found: ignore

  merge-input-files:
    name: Create Complete inputs.json
    runs-on: ubuntu-latest
    needs: get-run-info
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    steps:
      - name: Download All inputs.json
        uses: actions/download-artifact@v4
        with:
          pattern: inputs_*.json
          path: .

      - name: Read JSON and create matrix
        id: set-outputs
        run: |
          ls -lah
          jq -s '[.[][]]' inputs_*/inputs_*.json > complete_inputs.json
          matrix=$(cat complete_inputs.json | jq -c '.')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "***"
          cat complete_inputs.json

  run-tests:
    name: ${{ matrix.inputs.branch }} - ${{ matrix.inputs.nightly_build }} ${{ matrix.inputs.duckdb_arch }} (${{ matrix.inputs.runs_on }})
    needs: 
      - get-run-info
      - merge-input-files
    if: ${{ needs.merge-input-files.outputs.matrix != '[]' }}
    strategy:
      matrix:
        inputs: ${{ fromJson(needs.merge-input-files.outputs.matrix) }}
    continue-on-error: true
    runs-on: ${{ matrix.inputs.runs_on }}
    steps:
      - run: echo ${{ matrix.inputs.branch }} ${{ matrix.inputs.nightly_build }} ${{ matrix.inputs.runs_on }} ${{ matrix.inputs.duckdb_arch }} 
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.11'

      - name: Install Python dependencies
        run: pip install duckdb docker
            
      - name: Checkout repo with the scripts
        uses: actions/checkout@v4

      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
            repository: ${{ env.GH_REPO }}
            sparse-checkout: |
                .github/config
            path: ext
            
      - name: Verify ${{ matrix.inputs.nightly_build }} ${{ matrix.inputs.duckdb_arch }} build version and Test extensions
        id: verify-build
        shell: bash
        env:
          CURR_DATE: ${{ needs.get-run-info.outputs.CURR_DATE }}
        run: |
            uname -a
            if [[ ${{ matrix.inputs.nightly_build }} != 'python' ]]; then
              echo "Downloading duckdb-binaries-${{ matrix.inputs.duckdb_binary }} artifact from ${{ matrix.inputs.run_id }}..."
              if gh run download ${{ matrix.inputs.run_id }} --repo ${{ env.GH_REPO }} -n duckdb-binaries-${{ matrix.inputs.duckdb_binary }}; then
                  # echo "Artifact duckdb-binaries-${{ matrix.inputs.duckdb_binary }} is successfuly downloaded."
                  if [[ ${{ matrix.inputs.nightly_build }} == 'osx' ]]; then
                    unzip duckdb_cli-*.zip -d duckdb_path
                  else
                    unzip duckdb_cli-${{ matrix.inputs.duckdb_binary }}.zip -d duckdb_path
                  fi
              fi
            fi
            ls -lah
            echo "Verifying version and testing extensions..."
            python scripts/verify_and_test.py \
                --nightly_build ${{ matrix.inputs.nightly_build }} \
                --architecture ${{ matrix.inputs.duckdb_arch }} \
                --run_id ${{ matrix.inputs.run_id }} \
                --runs_on ${{ matrix.inputs.runs_on }} \
                --branch ${{ matrix.inputs.branch }}

      - name: Upload actions for extensions
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.inputs.branch }}_ext_${{ matrix.inputs.nightly_build }}_${{ matrix.inputs.duckdb_arch }}
          path: |
            ${{ matrix.inputs.branch }}_list_failed_ext_${{ matrix.inputs.nightly_build }}_${{ matrix.inputs.duckdb_arch }}.csv
            ${{ matrix.inputs.branch }}_non_matching_sha_${{ matrix.inputs.nightly_build }}_${{ matrix.inputs.duckdb_arch }}.csv
            ${{ matrix.inputs.branch }}_tested_platforms_${{ matrix.inputs.nightly_build }}_${{ matrix.inputs.duckdb_arch }}.csv
          if-no-files-found: ignore
    
  report:
    name: Create complete report
    runs-on: ubuntu-latest
    if: always()
    needs:
      - get-run-info 
      - run-tests
    strategy:
      matrix:
        branch: ["main", "v1.2-histrionicus"]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.11'

      - name: Install DuckDB for Python
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install duckdb pandas tabulate requests

      - name: Download inputs_${{ matrix.branch }}.json
        uses: actions/download-artifact@v4
        with:
          name: inputs_${{ matrix.branch }}.json
          path: .

      - name: Download extensions artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ matrix.branch }}_ext*
          path: ${{ matrix.branch }}_failed_ext

      - name: Download duckdb file
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.branch }}_run_info_tables.duckdb
          path: ${{ matrix.branch }}_tables
      
      - name: Generate report
        shell: bash
        env:
          CURR_DATE: ${{ needs.get-run-info.outputs.CURR_DATE }}
        run: |
          python scripts/create_build_report.py --branch ${{ matrix.branch }}

      - name: Upload REPORT
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.branch }}-REPORT
          path: ${{ needs.get-run-info.outputs.CURR_DATE }}-${{ matrix.branch }}.md
  
  upload:
    name: Upload Reports
    runs-on: ubuntu-latest
    needs: 
      - get-run-info
      - report
    if: always()
    steps:
      - name: Upload REPORT to the docs directory
        shell: bash
        env:
          CI_COMMIT_MESSAGE: "Add ${{ needs.get-run-info.outputs.CURR_DATE }} Reports"
          CI_COMMIT_AUTHOR: "hmeriann"
          GH_TOKEN: ${{ github.token }}
        run: |
          git config --global user.name ${{ env.CI_COMMIT_AUTHOR }}
          git config --global user.email "zuleykha.pavlichenkova@gmail.com"
          
          git config pull.rebase false
          git pull origin main

          mkdir -p docs/
          mv ${{ needs.get-run-info.outputs.CURR_DATE }}-main.md docs/main/
          mv ${{ needs.get-run-info.outputs.CURR_DATE }}-v1.2-histrionicus.md docs/v1.2-histrionicus/

          git add docs/main/${{ needs.get-run-info.outputs.CURR_DATE }}-*.md
          git add docs/v1.2-histrionicus/${{ needs.get-run-info.outputs.CURR_DATE }}-*.md
          git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
          git push origin main
