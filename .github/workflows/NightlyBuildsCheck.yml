name: Check Nightly Build Status
on:
  workflow_dispatch:
  schedule:
    - cron:  '0 8 * * 1-5' # runs at 9am CET (summer) on working days

permissions:
  contents: write
  issues: write

env:
  GH_TOKEN: ${{ github.token }}
  GH_REPO: duckdb/duckdb
  GH_ISSUE_REPO: ${{ github.repository }}

jobs:
  # check-wget:
  #   name: Check in advance
  #   runs-on: macos-13
  #   steps:
  #     - name: Checkout repo with the scripts
  #       uses: actions/checkout@v4
  #     - shell: bash
  #       run: chmod +x scripts/check_ext.sh && ./scripts/check_ext.sh
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         path: log.csv
  get-run-info:
    name: Generate nightly build artifact json file
    runs-on: ubuntu-latest
    outputs:
      matrix_main: ${{ steps.set-outputs.outputs.matrix_main }}
      matrix_release: ${{ steps.set-outputs.outputs.matrix_release }}
      CURR_DATE: ${{ steps.curr-date.outputs.CURR_DATE }}
    strategy:
      matrix:
        config: [{ "branch": "main", "event": "repository_dispatch"}, {"branch": "v1.2-histrionicus", "event": "workflow_dispatch"}]
    steps:
      - id: curr-date
        run: echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Checkout repo with the script
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.11'

      - name: Install DuckDB for Python
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install duckdb
      
      - name: Create Tables and Generate inputs.json
        shell: bash
        env:
          CURR_DATE: ${{ steps.curr-date.outputs.CURR_DATE }}
        run: |
          python scripts/create_tables_and_inputs.py --branch "${{ matrix.config.branch }}" --event "${{ matrix.config.event }}"

      - name: Upload DuckDB file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.branch }}_run_info_tables.duckdb
          path: ${{ matrix.config.branch }}_run_info_tables.duckdb
      
      - name: Read JSON and create matrix
        id: set-outputs
        run: |
          matrix=$(cat ${{ matrix.config.branch }}_inputs.json | jq -c '.')
          if [[ ${{ matrix.config.branch }} == 'main' ]]; then
            echo "matrix_main=$matrix" >> $GITHUB_OUTPUT
          else
            echo "matrix_release=$matrix" >> $GITHUB_OUTPUT
          fi
          echo "***"
          cat ${{ matrix.config.branch }}_inputs.json
      
      - name: Upload ${{ matrix.config.branch }}_inputs.json
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.branch }}_inputs.json
          path: ${{ matrix.config.branch }}_inputs.json
          if-no-files-found: ignore

  run-tests:
    name: ${{ matrix.branch }} - ${{ matrix.nightly_build }} ${{ matrix.duckdb_arch }} (${{ matrix.runs_on }})
    needs: get-run-info
    if: ${{ needs.get-run-info.outputs.matrix_main != '[]' }}
    strategy:
      matrix:
        branch: ["main", "v1.2-histrionicus"]
        include:
          - branch: "main"
            inputs: ${{ fromJson(needs.get-run-info.outputs.matrix_main) }}
            # nightly_build: ${{ fromJson(needs.get-run-info.outputs.matrix_main)[0].nightly_build }}
            # duckdb_arch: ${{ fromJson(needs.get-run-info.outputs.matrix_main)[0].duckdb_arch }}
            # runs_on: ${{ fromJson(needs.get-run-info.outputs.matrix_main)[0].runs_on }}
            # run_id: ${{ fromJson(needs.get-run-info.outputs.matrix_main)[0].run_id }}
            # duckdb_binary: ${{ fromJson(needs.get-run-info.outputs.matrix_main)[0].duckdb_binary }}

          - branch: "v1.2-histrionicus"
            inputs: ${{ fromJson(needs.get-run-info.outputs.matrix_release) }}
            # nightly_build: ${{ fromJson(needs.get-run-info.outputs.matrix_release)[1].nightly_build }}
            # duckdb_arch: ${{ fromJson(needs.get-run-info.outputs.matrix_release)[1].duckdb_arch }}
            # runs_on: ${{ fromJson(needs.get-run-info.outputs.matrix_release)[1].runs_on }}
            # run_id: ${{ fromJson(needs.get-run-info.outputs.matrix_release)[1].run_id }}
            # duckdb_binary: ${{ fromJson(needs.get-run-info.outputs.matrix_release)[1].duckdb_binary }}

    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ matrix.branch }} ${{ matrix.inputs.nightly_build }} ${{ matrix.inputs.runs_on }} ${{ matrix.inputs.duckdb_arch }} 
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #           python-version: '3.11'

  #     - name: Install Python dependencies
  #       run: pip install duckdb docker
            
  #     - name: Checkout repo with the scripts
  #       uses: actions/checkout@v4

  #     - name: Checkout repo with extensions config file
  #       uses: actions/checkout@v4
  #       with:
  #           repository: ${{ env.GH_REPO }}
  #           sparse-checkout: |
  #               .github/config
  #           path: ext
            
  #     - name: Verify ${{ matrix.nightly_build }} build version and Test extensions
  #       id: verify-build
  #       shell: bash
  #       env:
  #         CURR_DATE: ${{ needs.get-run-info.outputs.CURR_DATE }}
  #       run: |
  #           uname -m
  #           if [[ ${{ matrix.nightly_build }} != 'python' ]]; then
  #             echo "Downloading duckdb-binaries-${{ matrix.duckdb_binary }} artifact..."
  #             if gh run download ${{ matrix.run_id }} --repo ${{ env.GH_REPO }} -n duckdb-binaries-${{ matrix.duckdb_binary }}; then
  #                 echo "Artifact duckdb-binaries-${{ matrix.duckdb_binary }} is successfuly downloaded."
  #                 if [[ ${{ matrix.nightly_build }} == 'osx' ]]; then
  #                   unzip duckdb_cli-*.zip -d duckdb_path
  #                 else
  #                   unzip duckdb_cli-${{ matrix.duckdb_binary }}.zip -d duckdb_path
  #                 fi
  #             fi
  #           fi
  #           echo "Verifying version and testing extensions..."
  #           python scripts/verify_and_test.py \
  #               --nightly_build ${{ matrix.nightly_build }} \
  #               --architecture ${{ matrix.duckdb_arch }} \
  #               --run_id ${{ matrix.run_id }} \
  #               --runs_on ${{ matrix.runs_on }} \
  #               --branch ${{ matrix.branch }}

  #     - name: Upload actions for extensions
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ matrix.branch }}_ext_${{ matrix.nightly_build }}_${{ matrix.duckdb_arch }}
  #         path: |
  #           ${{ matrix.branch }}_list_failed_ext_${{ matrix.nightly_build }}_${{ matrix.duckdb_arch }}.csv
  #           ${{ matrix.branch }}_non_matching_sha_${{ matrix.nightly_build }}_${{ matrix.duckdb_arch }}.csv
  #           ${{ matrix.branch }}_tested_platforms_${{ matrix.nightly_build }}_${{ matrix.duckdb_arch }}.csv
  #         if-no-files-found: ignore
    
  # report:
  #   name: Create complete report
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs:
  #     - get-run-info 
  #     - run-tests
  #   strategy:
  #     matrix:
  #       branch: ["main", "v1.2-histrionicus"]
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4
      
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #           python-version: '3.11'

  #     - name: Install DuckDB for Python
  #       shell: bash
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install duckdb pandas tabulate requests

  #     - name: Download ${{ matrix.branch }}_inputs.json
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ matrix.branch }}_inputs.json
  #         path: .

  #     - name: Download extensions artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: ${{ matrix.branch }}_ext*
  #         path: ${{ matrix.branch }}_failed_ext

  #     - name: Download duckdb file
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ matrix.branch }}_run_info_tables.duckdb
  #         path: ${{ matrix.branch }}_tables
      
  #     - name: Generate report
  #       shell: bash
  #       env:
  #         CURR_DATE: ${{ needs.get-run-info.outputs.CURR_DATE }}
  #       run: |
  #         python scripts/create_build_report.py --branch ${{ matrix.branch }}

  #     - name: Upload REPORT
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ matrix.branch }}-REPORT
  #         path: ${{ needs.get-run-info.outputs.CURR_DATE }}-${{ matrix.branch }}.md
      
  #     - name: Upload REPORT to the docs directory
  #       shell: bash
  #       env:
  #         CI_COMMIT_MESSAGE: "Add ${{ needs.get-run-info.outputs.CURR_DATE }}-${{ matrix.branch }}.md"
  #         CI_COMMIT_AUTHOR: "hmeriann"
  #         GH_TOKEN: ${{ github.token }}
  #       run: |
  #         git config --global user.name ${{ env.CI_COMMIT_AUTHOR }}
  #         git config --global user.email "zuleykha.pavlichenkova@gmail.com"
          
  #         git config pull.rebase false
  #         git pull origin main

  #         mkdir -p docs/
  #         mkdir -p docs/${{ matrix.branch }}/
  #         mv ${{ needs.get-run-info.outputs.CURR_DATE }}-${{ matrix.branch }}.md docs/${{ matrix.branch }}/
  #         ls -lah docs/${{ matrix.branch }}

  #         git add docs/${{ matrix.branch }}/${{ needs.get-run-info.outputs.CURR_DATE }}-${{ matrix.branch }}.md
  #         git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
  #         git push origin main
